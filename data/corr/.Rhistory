for (i in 2:s) {              # main loop over all other subjects
W <- rbind(W, Y[[o[i]]])    # concatenate W with the next subject
WtW <- tcrossprod(W)        # efficiently get the top 'temporal' eigen-
r <- eigen(WtW, T)          # vectors of W
U <- r$vectors[,1:(2*t-1)]  # (note: we could use eigs function instead)
W <- crossprod(U, W)        # and multiply these into W to get weighted
# spatial eigenvectors
}
W[1:n,]                       # output just the required number of strongest spatial eigenvectors
}
tcpca <- function(Y, scale=T) {
require(rARPACK)
require(plyr)
s <- length(Y)                # number of subjects
t <- nrow(Y[[1]])             # number of time-points
v <- ncol(Y[[1]])             # number of voxels
n <- t                        # number of components to output
if (scale) {
for (i in 1:s) {
Y[[i]] <- scale(Y[[i]])
}
}
# collapse all the subjects together
Z <- laply(Y, function(y) y)
dim(Z) <- c(dim(Z)[1]*dim(Z)[2], dim(Z)[3])
ZtZ <- tcrossprod(Z)
W <- eigs(ZtZ, 2*t-1)
W <- crossprod(W$vectors, Z)
W[1:n,]
}
cscov <- function(Y, scale=T) {
require(plyr)
s <- length(Y)                # number of subjects
t <- nrow(Y[[1]])             # number of time-points
v <- ncol(Y[[1]])             # number of voxels
n <- t                        # number of components to output
if (scale) {
for (i in 1:s) {
Y[[i]] <- scale(Y[[i]])
}
}
Z <- laply(Y, cov)
Z <- apply(Z, c(2,3), mean)
Z
}
Y <- lapply(1:10, function(i) matrix(rnorm(100*500), 100, 500))
compW <- migp(Y, T)
refW <- tcpca(Y, T)
cW <- cscov(Y, T)
dim(cW)
cW[1:5,1:5]
dim(cov(compW))
cov(compW)[1:5,1:5]
cov2cor(cW[1:5,1:5])
cov2cor(cov(compW)[1:5,1:5])
cov(scale(compW))[1:5,1:5]
cov(scale(refW))[1:5,1:5]
cW[1:5,1:5]
migp <- function(Y, scale=TRUE) {
# require(rARPACK)
# note: eigs function in R requires k to not be as large as data dim - 1
s <- length(Y)                # number of subjects
t <- nrow(Y[[1]])             # number of time-points
v <- ncol(Y[[1]])             # number of voxels
n <- t                        # number of components to output
if (scale) {
for (i in 1:s) {
Y[[i]] <- scale(Y[[i]])
}
}
o <- sample(s)                # randomise the order subjects are processed
W <- Y[[o[1]]]                # copy 1st (randomly chosen) subject Y into W
for (i in 2:s) {              # main loop over all other subjects
W <- rbind(W, Y[[o[i]]])    # concatenate W with the next subject
WtW <- tcrossprod(W)        # efficiently get the top 'temporal' eigen-
r <- eigen(WtW, T)          # vectors of W
U <- r$vectors[,1:(2*t-1)]  # (note: we could use eigs function instead)
W <- crossprod(U, W)        # and multiply these into W to get weighted
# spatial eigenvectors
}
W[1:n,]                       # output just the required number of strongest spatial eigenvectors
}
tcpca <- function(Y, scale=T) {
require(rARPACK)
require(plyr)
s <- length(Y)                # number of subjects
t <- nrow(Y[[1]])             # number of time-points
v <- ncol(Y[[1]])             # number of voxels
n <- t                        # number of components to output
if (scale) {
for (i in 1:s) {
Y[[i]] <- scale(Y[[i]])
}
}
# collapse all the subjects together
Z <- laply(Y, function(y) y)
dim(Z) <- c(dim(Z)[1]*dim(Z)[2], dim(Z)[3])
ZtZ <- tcrossprod(Z)  # covariance of (subjs x time) x (subjs x time)
W <- eigs(ZtZ, n)     # keep only n components
W <- crossprod(W$vectors, Z) # now get the spatial eigenvectors
W
}
Y <- lapply(1:10, function(i) matrix(rnorm(100*500), 100, 500))
compW <- migp(Y, T)
refW <- tcpca(Y, T)
cW <- cscov(Y, T)
dim(comW)
dim(compW)
dim(refW)
refW[1:5,1:5]
compW[1:5,1:5]
cor(as.numeric(refW), as.numeric(compW))
cor(refW[,1], compW[,1])
sqrt(sum((refW[,1] - compW[,1])^2))
sqrt(mean((refW[,1] - compW[,1])^2))
tconcat <- function(Y, scale=T) {
require(plyr)
s <- length(Y)                # number of subjects
t <- nrow(Y[[1]])             # number of time-points
v <- ncol(Y[[1]])             # number of voxels
n <- t                        # number of components to output
if (scale) {
for (i in 1:s) {
Y[[i]] <- scale(Y[[i]])
}
}
# collapse all the subjects together
Z <- laply(Y, function(y) y)
dim(Z) <- c(dim(Z)[1]*dim(Z)[2], dim(Z)[3])
return(Z)
}
cY <- tconcat(Y, T)
cWY <- cov(cY)
dim(cW)
dim(cWY)
cW[1:5,1:5]
cWY[1:5,1:5]
cov2cor(cWY[1:5,1:5])
sqrt(mean((cWY - cW)^2))
cor(refY)[1:5,1:5]
cor(refW)[1:5,1:5]
cor(refW)[1,]
tmp1 <- cor(compW)[1,]
tmp2 <- cor(refW)[1,]
tmp3 <- cov2cor(cWY[1,])
cWY[1,]
head(cWY[1,])
tmp3 <- cov2cor(cWY)[1,]
tmp4 <- cov2cor(cW)[1,]
which(tmp1>0.1)
which(tmp1>0.4)
which(tmp1>0.2)
which(tmp2>0.2)
which(tmp3>0.2)
which(tmp4>0.2)
which(tmp3>0.1)
which(tmp4>0.1)
tmp3
cW[1,]
round(cW[1,], 2)
which(tmp3>0.05)
which(tmp4>0.05)
as.numeric(which(tmp4>0.05))
which(tmp3>0.05)
which(tmp3>0.08)
which(tmp3>0.06)
as.numeric(which(tmp4>0.06))
which(tmp2>0.2)
dim(Z)
dim(cY)
p1 <- princomp(cY)
p2 <- prcomp(cY)
?princomp
dim(p1$scores)
dim(p2$rotation)
?prcomp
dim(p2$x)
p2$x[1:5,1:5]
p1$x[1:5,1:5]
p1$scores[1:5,1:5]
all.equal(p1$scores, p2$x)
cor(p1$scores[,1], p2$x[,1])
cor(p1$scores[,2], p2$x[,2])
cor(p1$scores[,3], p2$x[,3])
p1 <- princomp(t(cY))
p2 <- prcomp(t(cY))
dim(p2$x)
cov(t(p2$x))[1:5,1:5]
cor(t(p2$x))[1:5,1:5]
cW[1:5,1:5]
cor(cor(t(p2$x))[1:5,1:5], cW[1:5,1:5])
cor(as.numeric(cor(t(p2$x))[1:5,1:5]), as.numeric(cW[1:5,1:5]))
cor(as.numeric(cor(t(p2$x[,1:100]))[1:5,1:5]), as.numeric(cW[1:5,1:5]))
cor(as.numeric(cor(t(p2$x[,1:100]))), as.numeric(cW))
cor(as.numeric(cor(t(p2$x[,1:500]))), as.numeric(cW))
cor(as.numeric(cor(t(p2$x[,1:300]))), as.numeric(cW))
cor(as.numeric(cor(t(p2$x[,1:100]))), as.numeric(cW))
dim(compW)
cor(as.numeric(cor(compW)), as.numeric(cW))
cor(as.numeric(cor(refW)), as.numeric(cW)) # exact same result as above
tmp <- prcomp(cY)
dim(tmp$rotation)
dim(tmp$x)
tmp <- cov(p2$x)
tmp[1:5,1:5]
barplot(p2$sdev)
barplot(p2$sdev^2)
barplot(p2$sdev/sum(p2$sdev))
barplot((p2$sdev/sum(p2$sdev))*100)
sum((p2$sdev/sum(p2$sdev))*100)
sum((p2$sdev/sum(p2$sdev)))
sum((p2$sdev/sum(p2$sdev))[1:100])
sum((p2$sdev/sum(p2$sdev))[1:200])
sum((p2$sdev/sum(p2$sdev))[1:300])
sum((p2$sdev/sum(p2$sdev))[1:400])
dim(p2)
sum((p2$sdev/sum(p2$sdev))[1:400])
sum((p2$sdev/sum(p2$sdev))[1:450])
library(MASS)
library(MASS)
?mvrnorm
n <- 30
## task
ct     <- 0.5
cmat.t <- matrix(c(1,ct,1,ct), 2)
mt     <- c(a=110, b=105)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=T)
cor(ts.t)
colMeans(ts.t)
cmat.t
mt     <- c(a=0, b=0)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=T)
cor(ts.t)
ct
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=F)
cor(ts.t)
ts.t   <- mvrnorm(100, mu=mt, Sigma=cmat.t, empirical=T)
cor(ts.t)
ts.t   <- mvrnorm(100, mu=mt, Sigma=cmat.t, empirical=T)
cor(ts.t)
cmat.t
cmat.t <- matrix(c(1,ct,ct,1), 2)
mt     <- c(a=0, b=0)
ts.t   <- mvrnorm(100, mu=mt, Sigma=cmat.t, empirical=T)
cor(ts.t)
ct     <- 0.5
cmat.t <- matrix(c(1,ct,ct,1), 2)
mt     <- c(a=110, b=105)
ts.t   <- mvrnorm(n, mu=mt, Sigma=cmat.t, empirical=T)
cor(ts.t)
colMeans(ts.t)
cr     <- 0.2
cmat.r <- matrix(c(1,cr,cr,1), 2)
mt     <- c(a=100, 100)
ts.mat <- mvrnorm(n, mu=mt, Sigma=cmat.r, empirical=T)
cor(ts.r)
colMeans(ts.r)
ts.r   <- mvrnorm(n, mu=mt, Sigma=cmat.r, empirical=T)
cor(ts.r)
colMeans(ts.r)
mt     <- c(a=100, b=100)
ts.r   <- mvrnorm(n, mu=mt, Sigma=cmat.r, empirical=T)
cor(ts.r)
colMeans(ts.r)
ts     <- rbind(ts.r, ts.r)
rep(c(1,0), each=n)
df     <- cbind(task=rep(c(1,0), each=n), ts)
head(df)
lm(b ~ a)
lm(b ~ a, data=df)
df     <- as.data.frame(cbind(task=rep(c(1,0), each=n), ts))
lm(b ~ a, data=df)
cor(ts)
ts     <- rbind(ts.t, ts.r)
df     <- as.data.frame(cbind(task=rep(c(1,0), each=n), ts))
lm(b ~ a, data=df)
cor(ts)
lm(b ~ task + a, data=df)
lm(b ~ task + a + task*a, data=df)
lm(b ~ a, data=as.data.frame(ts.t))
lm(b ~ a, data=as.data.frame(ts.r))
lm(b ~ task + a + task*a, data=df)
lm(b ~ task + a, data=df)
?persp
library(MASS)
require(grDevices)
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
xE <- c(-10,10); xy <- expand.grid(xE, xE)
trans3d(xy[,1], xy[,2], 6, pmat = res)
xy[,1]
xy[,2]
trans3d(x, y = 10, z = 6 + sin(x), pmat = res)
x
xE <- c(-10,10); xy <- expand.grid(xE, xE)
points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
library(lattice)
?wireframe
## volcano  ## 87 x 61 matrix
wireframe(volcano, shade = TRUE,
aspect = c(61/87, 0.4),
light.source = c(10,0,10))
g <- expand.grid(x = 1:10, y = 5:15, gr = 1:2)
g$z <- log((g$x^g$gr + g$y^2) * g$gr)
wireframe(z ~ x * y, data = g, groups = gr,
scales = list(arrows = FALSE),
drape = TRUE, colorkey = TRUE,
screen = list(z = 30, x = -60))
dim(volcano)
volcano[1:4,1:5]
cloud(Sepal.Length ~ Petal.Length * Petal.Width | Species, data = iris,
screen = list(x = -90, y = 70), distance = .4, zoom = .6)
par.set <-
list(axis.line = list(col = "transparent"),
clip = list(panel = "off"))
print(cloud(Sepal.Length ~ Petal.Length * Petal.Width,
data = iris, cex = .8,
groups = Species,
main = "Stereo",
screen = list(z = 20, x = -70, y = 3),
par.settings = par.set,
scales = list(col = "black")),
split = c(1,1,2,1), more = TRUE)
?surface3d
library(rgl)
install.packages("rgl")
library(rgl)
?persp3d
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
open3d()
bg3d("white")
material3d(col="black")
persp3d(x, y, z, aspect=c(1, 1, 0.5), col = "lightblue",
xlab = "X", ylab = "Y", zlab = "Sinc( r )")
xE <- c(-10,10); xy <- expand.grid(xE, xE)
points3d(xy[,1], xy[,2], 6, col = "red")
lines3d(x, y=10, z= 6 + sin(x), col = "green")
?surface3d
data(volcano)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
zlim <- range(y)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z-zlim[1]+1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color=col, back="lines")
library(tripack)
install.packages("tripack")
library(tripack)
?tri.plot
?plot.tri
# random points
plot(tri.mesh(rpois(100,lambda=20),rpois(100,lambda=20),duplicate="remove"))
data(quakes)
quakes.part<-quakes[(quakes[,1]<=-10.78 & quakes[,1]>=-19.4 &
quakes[,2]<=182.29 & quakes[,2]>=165.77),]
quakes.tri<-tri.mesh(quakes.part$lon, quakes.part$lat, duplicate="remove")
plot(quakes.tri)
?trans3d
?persp
sample(seq(0, 1, length=5))
crds <- cbind(x=sample(seq(0, 1, length=5)), x=sample(seq(0, 1, length=5)))
crds
crds <- cbind(x=sample(seq(-0.8, 0.8, length=5)), x=sample(seq(-0.8, 0.8, length=5)))
crds
crds <- cbind(x=sample(seq(-0.8, 0.8, length=6)), x=sample(seq(-0.8, 0.8, length=6)))
crds
plot(crds)
plot(crds, type=2)
plot(crds)
abline(x=0)
?abline
plot(crds); abline(h=0); abline(v=0)
plot(crds); abline(h=0, type=3); abline(v=0)
plot(crds); abline(h=0, lty=3); abline(v=0)
plot(crds); abline(h=0, lty=3); abline(v=0, lty=3)
plot(crds, bty='n'); abline(h=0, lty=3); abline(v=0, lty=3)
plot(crds); abline(h=0, lty=3); abline(v=0, lty=3)
plot(crds, xlim=c(-1,1), ylim=c(-1,1)); abline(h=0, lty=3); abline(v=0, lty=3)
points(c(0,0), lwd=2)
points(0, 0, lwd=2)
points(0, 0, lwd=4)
mat1 <- as.matrix(dist(crds))
mean(mat1[lower.tri(mat1)])
vec2 <- sqrt(rowSums(crds^2))
mean(vec2)
library(plyr)
qc_spatial_epi  <- read.csv("qc_spatial_epi.csv")
qc_spatial      <- read.csv("qc_spatial.csv")
setwd("~/Dropbox/Research/cmi/qap_poster/data/corr")
library(plyr)
qc_spatial_epi  <- read.csv("qc_spatial_epi.csv")
qc_spatial      <- read.csv("qc_spatial.csv")
qc_temporal_fd  <- read.csv("qc_temporal_fd.csv")
qc_temporal     <- read.csv("qc_temporal.csv")
head(qc_spatial_epi)
names(qc_spatial_epi)
names(qc_spatial)
names(qc_temporal_fd)
names(qc_temporal)
head(qc_temporal, 1)
z_renamer <- function(qc, prefix) {
orig_cols <- names(qc)
new_cols  <- paste(prefix, orig_cols, sep="_")
names(qc)[names(qc) %in% orig_cols] <- new_cols
return(qc)
}
z_renamer(qc_spatial, "anat")
names(z_renamer(qc_spatial, "anat"))
qc_spatial      <- subset(qc_spatial, select=c("subject", "session", "cnr", "efc", "fber", "fwhm", "qi1", "snr"))
qc_spatial_epi  <- subset(qc_spatial_epi, select=c("subject", "session", "efc", "fber", "fwhm", "ghost_x", "ghost_y"))
qc_temporal     <- subset(qc_temporal, select=c("subject", "session", "dvars", "outlier", "quality"))
qc_temporal_fd  <- subset(qc_temporal_fd, select=c("subject", "session", "mean_fd", "num_fd", "perc_fd"))
names(z_renamer(qc_spatial, "anat"))
z_renamer <- function(qc, prefix) {
orig_cols <- names(qc)[!(names(qc) %in% c("subject", "session"))]
new_cols  <- paste(prefix, orig_cols, sep="_")
names(qc)[names(qc) %in% orig_cols] <- new_cols
return(qc)
}
names(z_renamer(qc_spatial, "anat"))
qc_spatial      <- z_renamer(qc_spatial, "anat")
qc_spatial_epi  <- z_renamer(qc_spatial_epi, "func")
qc_temporal     <- z_renamer(qc_temporal, "func")
qc_temporal_fd  <- z_renamer(qc_temporal_fd, "func")
?merge
tmp <- merge(qc_spatial, qc_spatial_epi)
head(tmp)
qc_tmp1         <- merge(qc_spatial, qc_spatial_epi)
qc_tmp2         <- merge(qc_tmp1, qc_temporal)
qc_tmp3         <- merge(qc_tmp2, qc_temporal_fd)
head(qc_tmp3)
head(qc_tmp3, 1)
head(qc_tmp3, 2)
qc_tmp1         <- merge(qc_spatial, qc_spatial_epi)
qc_tmp2         <- merge(qc_tmp1, qc_temporal)
qc_tmp3         <- merge(qc_tmp2, qc_temporal_fd)
qc_tmp4         <- qc_tmp3
qc_tmp4$func_ghost_x
qc_tmp4$func_ghost_x > qc_tmp4$func_ghost_y
ifelse(qc_tmp4$func_ghost_x > qc_tmp4$func_ghost_y, qc_tmp4$func_ghost_x, qc_tmp4$func_ghost_y)
tmp1 <- ifelse(qc_tmp4$func_ghost_x > qc_tmp4$func_ghost_y, qc_tmp4$func_ghost_x, qc_tmp4$func_ghost_y)
tmp2 <- sapply(1:nrow(qc_tmp4), function(i) {
if (qc_tmp4$func_ghost_x > qc_tmp4$func_ghost_y) {
return(qc_tmp4$func_ghost_x)
} else {
return(qc_tmp4$func_ghost_y)
}
})
warnings()
tmp2 <- sapply(1:nrow(qc_tmp4), function(i) {
if (qc_tmp4$func_ghost_x[i] > qc_tmp4$func_ghost_y[i]) {
return(qc_tmp4$func_ghost_x)
} else {
return(qc_tmp4$func_ghost_y)
}
})
all.equal(tmp1, tmp2)
all.equal(as.numeric(tmp1), as.numeric(tmp2))
tmp2 <- sapply(1:nrow(qc_tmp4), function(i) {
if (qc_tmp4$func_ghost_x[i] > qc_tmp4$func_ghost_y[i]) {
return(qc_tmp4$func_ghost_x[i])
} else {
return(qc_tmp4$func_ghost_y[i])
}
})
all.equal(tmp1, tmp2)
qc_tmp4         <- qc_tmp3
qc_tmp4$func_gsr<- with(qc_tmp4, ifelse(func_ghost_x > func_ghost_y, func_ghost_x, func_ghost_y))
qc_final        <- qc_tmp4
write.csv("../corr_phenotypic_v1.csv")
write.csv(qc_file, file="../corr_phenotypic_v1.csv")
write.csv(qc_final, file="../corr_phenotypic_v1.csv")
nrow(qc_tmp3)
nrow(qc_tmp1)
nrow(qc_spatial)
nrow(qc_spatial_epi)
nrow(qc_temporal_fd)
abide <- read.csv("../abide_phenotypic_V1_0b_preprocessed2.csv")
names(abide)
dim(qc_final)
unique(qc_final$session)
qc_spatial$session
